{"version":3,"sources":["components/TaskList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["columns","title","dataIndex","key","render","text","tags","map","tag","color","length","toUpperCase","record","type","data","name","age","driver","mapCenter","mapPosition","TaskList","dataSource","expandedRowRender","center","zoom","width","height","anchor","payload","onClick","event","offset","src","alt","Header","Layout","Content","Footer","App","useState","page","setPage","getSetPage","className","theme","mode","selectedKeys","style","lineHeight","Item","padding","margin","background","minHeight","renderPage","textAlign","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sYAOMA,EAAU,CACZ,CACIC,MAAO,qBACPC,UAAW,MACXC,IAAK,OAET,CACIF,MAAO,wFACPC,UAAW,OACXC,IAAK,OACLC,OAAQ,SAACC,GAAD,OAAkB,2BAAIA,KAElC,CACIJ,MAAO,2BACPC,UAAW,MACXC,IAAK,OAET,CACIF,MAAO,iFACPC,UAAW,SACXC,IAAK,UAET,CACIF,MAAO,4EACPE,IAAK,OACLD,UAAW,OACXE,OAAQ,SAACE,GAAD,OACJ,8BACKA,EAAKC,KAAI,SAAAC,GACV,IAAIC,EAAQD,EAAIE,OAAS,EAAI,WAAa,QAI1C,MAHY,iEAARF,GAAgC,qDAARA,IACxBC,EAAQ,WAGR,kBAAC,IAAD,CAAKA,MAAOA,EAAON,IAAKK,GACvBA,EAAIG,qBAOrB,CACIV,MAAO,mDACPE,IAAK,SACLC,OAAQ,SAACC,EAAcO,GAAf,OACJ,8BACI,iIACA,kBAAC,IAAD,CAASC,KAAK,aACd,8JACA,kBAAC,IAAD,CAASA,KAAK,aACd,8HAgBVC,EAAuB,CAC3B,CACEX,IAAK,SACLY,KAAM,iOACNC,IAAK,GACLC,OAAQ,0GACRX,KAAM,CAAC,+CACPY,UAAW,CAAC,UAAW,WACvBC,YAAa,CAAC,UAAW,YAE3B,CACEhB,IAAK,SACLY,KAAM,qKACNC,IAAK,GACLC,OAAQ,gEACRX,KAAM,CAAC,eAAM,0DACbY,UAAW,CAAC,SAAW,WACvBC,YAAa,CAAC,SAAW,YAE3B,CACEhB,IAAK,SACLY,KAAM,wLACNC,IAAK,GACLC,OAAQ,oGACRX,KAAM,CAAC,+DAAc,oDACrBY,UAAW,CAAC,SAAW,WACvBC,YAAa,CAAC,SAAW,aAId,SAASC,IACpB,OACI,kBAAC,IAAD,CACIpB,QAASA,EACTqB,WAAYP,EACZQ,kBAMI,SAACV,GAAD,OACI,kBAAC,IAAD,CAAKW,OAAQX,EAAOM,UAAWM,KAAM,GAAIC,MAAO,IAAKC,OAAQ,KACzD,kBAAC,IAAD,CAAQC,OAAQf,EAAOO,YAAaS,QAAS,EAAGC,QAC5C,YAA2E,EAAxEC,MAAwE,EAAjEH,OAAiE,EAAzDC,WAGtB,kBAAC,IAAD,CAASD,OAAQ,CAAC,OAAQ,QAASI,OAAQ,CAAC,IAAK,KACjD,yBAAKC,IAAI,aAAaP,MAAO,IAAKC,OAAQ,IAAKO,IAAI,U,IClHnEC,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OAiBzB,IAwCeC,EAxCO,WAAO,IAAD,EAEHC,mBAAS,SAFN,mBAEpBC,EAFoB,KAEdC,EAFc,KAGrBC,EAAa,SAACF,GAAD,OAAgB,kBAAMC,EAAQD,KAEjD,OACC,kBAAC,IAAD,CAAQG,UAAU,UACjB,kBAACT,EAAD,KACC,yBAAKS,UAAU,SACf,kBAAC,IAAD,CACCC,MAAM,OACNC,KAAK,aACLC,aAAc,CAACN,GACfO,MAAO,CAAEC,WAAY,SAErB,kBAAC,IAAKC,KAAN,CAAW9C,IAAI,OAAO0B,QAASa,EAAW,SAA1C,8CACA,kBAAC,IAAKO,KAAN,CAAW9C,IAAI,QAAQ0B,QAASa,EAAW,UAA3C,+FACA,kBAAC,IAAKO,KAAN,CAAW9C,IAAI,OAAO0B,QAASa,EAAW,SAA1C,2GACA,kBAAC,IAAKO,KAAN,CAAW9C,IAAI,QAAQ0B,QAASa,EAAW,UAA3C,oFAIF,kBAACN,EAAD,CAASW,MAAO,CAAEG,QAAS,WAC1B,kBAAC,IAAD,CAAYH,MAAO,CAAEI,OAAQ,WAC5B,kBAAC,IAAWF,KAAZ,mGACA,kBAAC,IAAWA,KAAZ,mDACA,kBAAC,IAAWA,KAAZ,+FAGD,yBAAKF,MAAO,CAAEK,WAAY,OAAQF,QAAS,GAAIG,UAAW,MAtC9D,SAAoBb,GAChB,OAAQA,GACJ,IAAK,QACD,OAAO,kBAACpB,EAAD,MACX,QACI,MAAO,OAkCEkC,CAAWd,KAK7B,kBAACH,EAAD,CAAQU,MAAO,CAAEQ,UAAW,WAA5B,4CChDiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASzD,OAAO,kBAAC,EAAD,MAAS0D,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8555067b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Table, Divider, Tag } from 'antd';\r\n\r\nimport Map from 'pigeon-maps'\r\nimport Marker from 'pigeon-marker'\r\nimport Overlay from 'pigeon-overlay'\r\n\r\nconst columns = [\r\n    {\r\n        title: 'Код',\r\n        dataIndex: 'key',\r\n        key: 'key',\r\n    },\r\n    {\r\n        title: 'Описание задачи',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        render: (text: string) => <a>{text}</a>,\r\n    },\r\n    {\r\n        title: 'Мест',\r\n        dataIndex: 'age',\r\n        key: 'age',\r\n    },\r\n    {\r\n        title: 'Ответственный',\r\n        dataIndex: 'driver',\r\n        key: 'driver',\r\n    },\r\n    {\r\n        title: 'Статус задачи',\r\n        key: 'tags',\r\n        dataIndex: 'tags',\r\n        render: (tags: any[]) => (\r\n            <span>\r\n                {tags.map(tag => {\r\n                let color = tag.length > 5 ? 'geekblue' : 'green';\r\n                if (tag === 'отклонение' || tag === 'задержка') {\r\n                    color = 'volcano';\r\n                }\r\n                return (\r\n                    <Tag color={color} key={tag}>\r\n                    {tag.toUpperCase()}\r\n                    </Tag>\r\n                );\r\n                })}\r\n            </span>\r\n        ),\r\n    },\r\n    {\r\n        title: 'Действия',\r\n        key: 'action',\r\n        render: (text: string, record: any) => (\r\n            <span>\r\n                <a>Чат с исполнителем</a>\r\n                <Divider type=\"vertical\" />\r\n                <a>Сменить ответственного</a>\r\n                <Divider type=\"vertical\" />\r\n                <a>Отменить задание</a>\r\n            </span>\r\n        ),\r\n    },\r\n];\r\n\r\ninterface ITrackedItem {\r\n    key: string\r\n    age: number\r\n    name: string\r\n    driver: string\r\n    tags: string[]\r\n    mapCenter: [number, number]\r\n    mapPosition: [number, number]\r\n}\r\n\r\nconst data: ITrackedItem[] = [\r\n  {\r\n    key: '112316',\r\n    name: 'Уран-гадолиниевые таблетки для ВВЭР-1000 в Цех3',\r\n    age: 42,\r\n    driver: 'Григорий Перельман',\r\n    tags: ['в работе'],\r\n    mapCenter: [55.641357, 37.687478],\r\n    mapPosition: [55.642421, 37.683814]\r\n  },\r\n  {\r\n    key: '112312',\r\n    name: 'Лопасти для сборки турбин в Цех2',\r\n    age: 32,\r\n    driver: 'Петр Капица',\r\n    tags: ['ок', 'завершено'],\r\n    mapCenter: [55.709780, 37.631195],\r\n    mapPosition: [55.709780, 37.631195],\r\n  },\r\n  {\r\n    key: '112313',\r\n    name: 'Защитные оболочки для ПЭЛ СУЗ в Цех3',\r\n    age: 88,\r\n    driver: 'Алексей Новоселов',\r\n    tags: ['отклонение', 'задержка'],\r\n    mapCenter: [55.705640, 37.589775],\r\n    mapPosition: [55.705640, 37.589775],\r\n  },\r\n];\r\n\r\nexport default function TaskList() {\r\n    return (\r\n        <Table\r\n            columns={columns}\r\n            dataSource={data}\r\n            expandedRowRender={\r\n                // <p style={{ margin: 0 }}>Hello!</p>\r\n                // 49.299952 55.611509 -- Казань-Экспо (пусто)\r\n                // 50.879, 4.6997 -- оригинал\r\n                // 50.874, 4.6947 -- оригинал маркер\r\n                // 55.641357, 37.687478\r\n                (record: ITrackedItem) => (\r\n                    <Map center={record.mapCenter} zoom={15} width={600} height={400}>\r\n                        <Marker anchor={record.mapPosition} payload={1} onClick={\r\n                            ({ event, anchor, payload }: { event: any, anchor: any, payload: any }) => {}\r\n                        } />\r\n\r\n                        <Overlay anchor={[50.879, 4.6997]} offset={[120, 79]}>\r\n                        <img src='pigeon.jpg' width={240} height={158} alt='' />\r\n                        </Overlay>\r\n                    </Map>\r\n                )\r\n            }\r\n        />\r\n    )\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport { useState } from 'react';\n\nimport { Layout, Menu, Breadcrumb } from 'antd';\nimport TaskList from './components/TaskList';\nconst { Header, Content, Footer } = Layout;\n\ntype Page =\n    'main'\n    | 'tasks'\n    | 'maps'\n    | 'admin'\n\nfunction renderPage(page: Page) {\n    switch (page) {\n        case 'tasks':\n            return <TaskList/>\n        default:\n            return '404'\n    }\n}\n\nconst App: React.FC = () => {\n\n\tconst [page, setPage] = useState('tasks' as Page)\n\tconst getSetPage = (page: Page) => () => setPage(page)\n\n\treturn (\n\t\t<Layout className=\"layout\">\n\t\t\t<Header>\n\t\t\t\t<div className=\"logo\" />\n\t\t\t\t<Menu\n\t\t\t\t\ttheme=\"dark\"\n\t\t\t\t\tmode=\"horizontal\"\n\t\t\t\t\tselectedKeys={[page]}\n\t\t\t\t\tstyle={{ lineHeight: '64px' }}\n\t\t\t\t>\n\t\t\t\t\t<Menu.Item key=\"main\" onClick={getSetPage(\"main\")}>Главная</Menu.Item>\n\t\t\t\t\t<Menu.Item key=\"tasks\" onClick={getSetPage(\"tasks\")}>Мониторинг задач</Menu.Item>\n\t\t\t\t\t<Menu.Item key=\"maps\" onClick={getSetPage(\"maps\")}>Управление картами</Menu.Item>\n\t\t\t\t\t<Menu.Item key=\"admin\" onClick={getSetPage(\"admin\")}>Администратор</Menu.Item>\n\t\t\t\t</Menu>\n\t\t\t</Header>\n\n\t\t\t<Content style={{ padding: '0 50px' }}>\n\t\t\t\t<Breadcrumb style={{ margin: '16px 0' }}>\n\t\t\t\t\t<Breadcrumb.Item>Цифровой прорыв 2019</Breadcrumb.Item>\n\t\t\t\t\t<Breadcrumb.Item>РосАтом</Breadcrumb.Item>\n\t\t\t\t\t<Breadcrumb.Item>Умная логистика</Breadcrumb.Item>\n\t\t\t\t</Breadcrumb>\n\n\t\t\t\t<div style={{ background: '#fff', padding: 24, minHeight: 280 }}>\n                    {renderPage(page)}\n\t\t\t\t</div>\n\n\t\t\t</Content>\n\n\t\t\t<Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>\n\t\t</Layout>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}